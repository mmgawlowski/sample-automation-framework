package custom.assertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.CheckReturnValue;
import org.assertj.core.util.Objects;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import org.openqa.selenium.Rectangle;
import org.openqa.selenium.WebElement;

import javax.annotation.Generated;

/**
 * {@link WebElement} specific custom.assertions - Generated by CustomAssertionGenerator.
 */
@Generated(value="assertj-custom.assertions-generator")
public class WebElementAssert extends AbstractObjectAssert<WebElementAssert, WebElement> {

  /**
   * Creates a new <code>{@link WebElementAssert}</code> to make custom.assertions on actual WebElement.
   * @param actual the WebElement we want to make custom.assertions on.
   */
  public WebElementAssert(WebElement actual) {
    super(actual, WebElementAssert.class);
  }

  /**
   * An entry point for WebElementAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWebElement)</code> and get specific assertion with code completion.
   * @param actual the WebElement we want to make custom.assertions on.
   * @return a new <code>{@link WebElementAssert}</code>
   */
  @CheckReturnValue
  public static WebElementAssert assertThat(WebElement actual) {
    return new WebElementAssert(actual);
  }

  /**
   * Verifies that the actual WebElement is displayed.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is not displayed.
   */
  public WebElementAssert isDisplayed() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isDisplayed()) {
      failWithMessage("\nExpecting that actual WebElement is displayed but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement is not displayed.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is displayed.
   */
  public WebElementAssert isNotDisplayed() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isDisplayed()) {
      failWithMessage("\nExpecting that actual WebElement is not displayed but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement is enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is not enabled.
   */
  public WebElementAssert isEnabled() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isEnabled()) {
      failWithMessage("\nExpecting that actual WebElement is enabled but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement is not enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is enabled.
   */
  public WebElementAssert isNotEnabled() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isEnabled()) {
      failWithMessage("\nExpecting that actual WebElement is not enabled but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement's location is equal to the given one.
   * @param location the given location to compare the actual WebElement's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement's location is not equal to the given one.
   */
  public WebElementAssert hasLocation(Point location) {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Point actualLocation = actual.getLocation();
    if (!Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement's rect is equal to the given one.
   * @param rect the given rect to compare the actual WebElement's rect to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement's rect is not equal to the given one.
   */
  public WebElementAssert hasRect(Rectangle rect) {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rect of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Rectangle actualRect = actual.getRect();
    if (!Objects.areEqual(actualRect, rect)) {
      failWithMessage(assertjErrorMessage, actual, rect, actualRect);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement is selected.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is not selected.
   */
  public WebElementAssert isSelected() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isSelected()) {
      failWithMessage("\nExpecting that actual WebElement is selected but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement is not selected.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement is selected.
   */
  public WebElementAssert isNotSelected() {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isSelected()) {
      failWithMessage("\nExpecting that actual WebElement is not selected but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement's size is equal to the given one.
   * @param size the given size to compare the actual WebElement's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement's size is not equal to the given one.
   */
  public WebElementAssert hasSize(Dimension size) {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Dimension actualSize = actual.getSize();
    if (!Objects.areEqual(actualSize, size)) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement's tagName is equal to the given one.
   * @param tagName the given tagName to compare the actual WebElement's tagName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement's tagName is not equal to the given one.
   */
  public WebElementAssert hasTagName(String tagName) {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting tagName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTagName = actual.getTagName();
    if (!Objects.areEqual(actualTagName, tagName)) {
      failWithMessage(assertjErrorMessage, actual, tagName, actualTagName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WebElement's text is equal to the given one.
   * @param text the given text to compare the actual WebElement's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WebElement's text is not equal to the given one.
   */
  public WebElementAssert hasText(String text) {
    // check that actual WebElement we want to make custom.assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualText = actual.getText();
    if (!Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return this;
  }

}
